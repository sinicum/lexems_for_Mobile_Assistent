// ----- Текущая госпитализация. /getCurrHosp
begin(patID, HospList, Hosp, qrEmergEvent ,status)

    //declare MP.HOSPS_LIST(Hospitalizations:MP.HOSP_EVENT[Collection1],error:string);   
    //declare MP.HOSP_EVENT(Collection1:MP.HOSPS_LIST,EventID:string,CreationDateTime:string,CloseDate:string,ReceptionDiagnosis:string,Diagnosis:string,HospitalizationType:string,HospitalizationReason:string,Division:string,LpuName:string,Operations:MP.OPER[Collection2],Exams:MP.EXAM[Collection3]); 
    //declare MP.OPER(Collection2:MP.HOSP_EVENT,RouteDate:string,OperName:string,OperStatus:string); 
    //declare MP.EXAM(Collection3:MP.HOSP_EVENT,ExaminationDate:string,ExaminationTime:string,Status:string,Post:string,MedicalExaminationType:string,Recomendations:string,RoutesToDiagnostic:MP.ROUTE_TO_DIAGNOSTIC[Collection4],RoutesToDoctor:MP.ROUTE_TO_DOCTOR[Collection5],HospDestinations:MP.HOSPITAL_DESTINATION[Collection6]);
    //declare MP.ROUTE_TO_DIAGNOSTIC(Collection4:MP.EXAM,RouteDate:string,ResearchCode:string,ResearchName:string);
    //declare MP.ROUTE_TO_DOCTOR(Collection5:MP.EXAM,RouteDate:string,SpecialityCode:string,SpecialityName:string);
    //declare MP.HOSPITAL_DESTINATION(Collection6:MP.EXAM,Signa:string);
    
    @status := 200;
    @HospList := new MP.HOSPS_LIST();
    @patID := TryCast(@querystring["patId"], "Guid");
    //@patID :="4c0f9780-d065-4338-b7ce-b13c4a03120d"; //выписан
    //@patID :="b708e782-4f83-4f3b-8639-512c0c9637bf";


    if (str(@patID)<>"")
        begin()
            @qrEmergEvent := query top 1 {EventID} 
                        from "AKUZ.EMERGENCY_EVENT" 
                        where {AmbulanceCard / Patient / PatientID} = @patID and {CloseDate} = Null()
                        order by {CreationDateTime} desc
                        ;
                        
            if (@qrEmergEvent -> Count()>0)
                begin(EventID)
                    @EventID := @qrEmergEvent[0] -> {EventID};
                    @qrEmergEvent := query top 1 {EventID}
                                        ,{CreationDateTime}
                                        ,{CloseDate}
                                        ,{ReceptionDiagnosis / Mkb}
                                        ,{ReceptionDiagnosis / Diagnosis}
                                        ,{MedicalcardRegistration / Mkb}
                                        ,{MedicalcardRegistration / Diagnosis}
                                        ,{MedicalcardRegistration / HospitalizationType / Name}
                                        ,{MedicalcardRegistration / HospitalizationReason / Name}
                                        ,{MedicalcardRegistration / Division / Name}
                                        ,{AmbulanceCard / CardLpu / Name}
                                        ,{HospitalDestinationList / HospitalDestinations}
                                        ,{MedicalcardRegistration / MovementID}
                                from "AKUZ.EMERGENCY_EVENT" 
                                where {EventID} = @EventID
                                ;
                    if (@qrEmergEvent->Count()>0)
                        begin(thisEmergEvent)
                            @thisEmergEvent := @qrEmergEvent[0];
                            @Hosp := new MP.HOSP_EVENT();
                            @Hosp->{EventID} := @thisEmergEvent ->{EventID};
                            @Hosp->{CreationDateTime} := Str(@thisEmergEvent->{CreationDateTime},"yyyy-MM-dd HH:mm");
                            if(@thisEmergEvent->{CloseDate}<>Null()) @Hosp->{CloseDate} := Str(@thisEmergEvent->{CloseDate},"yyyy-MM-dd");
                            @Hosp->{ReceptionDiagnosis} := @thisEmergEvent -> {ReceptionDiagnosis / Mkb} +" | "+ @thisEmergEvent -> {ReceptionDiagnosis / Diagnosis};
                            @Hosp->{Diagnosis} := @thisEmergEvent -> {MedicalcardRegistration / Mkb} +" | "+ @thisEmergEvent -> {MedicalcardRegistration / Diagnosis};
                            @Hosp->{HospitalizationType} := @thisEmergEvent->{MedicalcardRegistration / HospitalizationType / Name};
                            @Hosp->{HospitalizationReason} := @thisEmergEvent->{MedicalcardRegistration / HospitalizationReason / Name};
                            @Hosp->{Division} := @thisEmergEvent ->{MedicalcardRegistration / Division / Name};
                            @Hosp->{LpuName} := @thisEmergEvent ->{AmbulanceCard / CardLpu / Name};
                            //Операции
                            begin(QROperation,Oper)
                                @QROperation := (query {MedicalRecordID},{SummaryOperationName},{RouteDate},{OperationPlannedDate},
                                {OperationProtocol / OperationProtocolID}
                                from "AKUZ.ROUTE_TO_OPERATION" where {AmbulanceEvent / EventID} = @EventID
                                order by {RouteDate} desc);                  
                                foreach(thisqr in @QROperation)
                                    begin(Oper)
                                        @Oper := new MP.OPER();
                                        @Oper -> {OperName} := @thisqr -> {SummaryOperationName};
                                        @Oper -> {RouteDate} := IsNull(@thisqr -> str({OperationPlannedDate},"dd.MM.yyyy"),@thisqr -> str({RouteDate},"dd.MM.yyyy"));
                                        @Oper -> {OperStatus} := "В плане";
                                        
                                        if (str(@thisqr -> {OperationProtocol / OperationProtocolID})<>"")
                                            begin(OperationProtocolID,QRProtocol)
                                                @OperationProtocolID := @thisqr -> {OperationProtocol / OperationProtocolID};
                                                @QRProtocol := (query top 1 {StageType},{BeginTime} from "AKUZ.OPERATION_PROTOCOL_STAGE" 
                                                where {OperationProtocol / OperationProtocolID} = @OperationProtocolID And {StageType}>=3
                                                order by {StageType} desc);
                                                if (@QRProtocol -> Count()>0)
                                                    begin()
                                                        @Oper -> {RouteDate} := @QRProtocol[0] -> str({BeginTime},"dd.MM.yyyy");
                                                        if (@QRProtocol[0] -> {StageType} = 3) @Oper -> {OperStatus} := "Идет операция";
                                                        if (@QRProtocol[0] -> {StageType} > 3) @Oper -> {OperStatus} := "Завершена";
                                                    end;
                                            end;                                      
                                        //проверка выполнения в SURGICAL_OPERATION
                                        begin(QRMRR,MedicalRecordID)
                                            @MedicalRecordID := @thisqr -> {MedicalRecordID};
                                            @QRMRR := (query top 1 {MedicalRecordLink / MedicalRecordID}
                                            from "AKUZ.MEDICAL_RECORD_RELATIONSHIP" 
                                            where {MedicalRecord / MedicalRecordID} = @MedicalRecordID And {RelationshipType} = 2);
                                            if (@QRMRR -> Count()>0)
                                                begin(MedicalRecordLink,QRSO)
                                                    @MedicalRecordLink := @QRMRR[0] -> {MedicalRecordLink / MedicalRecordID};
                                                    @QRSO := (query top 1 {BeginTime},{EndTime},{EndDate}
                                                    from "AKUZ.SURGICAL_OPERATION" 
                                                    where {AmbulanceEvent / EventID} = @EventID And {MedicalRecordID} = @MedicalRecordLink);
                                                    if (@QRSO -> Count()>0)
                                                        begin()
                                                            @Oper -> {RouteDate} := IsNull(IsNull(@QRSO[0] -> str({EndDate},"dd.MM.yyyy"),@QRSO[0] -> str({BeginTime},"dd.MM.yyyy")),@thisqr -> str({RouteDate},"dd.MM.yyyy"));
                                                            @Oper -> {OperStatus} := "Завершена";
                                                            if (str(@QRSO[0] -> {EndTime})="") @Oper -> {OperStatus} := "Идет операция";
                                                        end;                                           
                                                end;                                               
                                        end;                                  
                                        @Hosp -> {Operations} -> Add(@Oper);
                                    end;                                        
                            end;                            
                            //осмотры
                            begin(QRLastExam,MCRMovementID)
                                @MCRMovementID := @qrEmergEvent[0] -> {MedicalcardRegistration / MovementID};
                                @QRLastExam := (query top 10 {ExaminationDate}
                                ,{ExaminationTime}
                                ,{Status}
                                ,{Post / DisplayName}
                                ,{MedicalExaminationType}
                                ,{MedicalRecordID} 
                                ,{Recomendations}
                                from "AKUZ.MEDICAL_EXAMINATION" 
                                where {AmbulanceEvent / EventID} = @EventID  //And {MedicalExaminationType} <> 0
                                And {Movement / MovementID} = @MCRMovementID //And {Status}<>Null()
                                order by {ExaminationDate} desc,{ExaminationTime} desc); 
                                //осмотры
                                foreach(thisQRLastExam in @QRLastExam)
                                    begin(Exam,MEMedicalRecordID)
                                        @Exam := new MP.EXAM();
                                        @Exam -> {ExaminationDate} := @thisQRLastExam -> str({ExaminationDate},"dd.MM.yyyy");
                                        @Exam -> {ExaminationTime} := @thisQRLastExam -> str({ExaminationTime},"HH:mm");
                                        @Exam -> {Status} := @thisQRLastExam -> str({Status});
                                        @Exam -> {Post} := @thisQRLastExam -> {Post / DisplayName};
                                        @Exam -> {Recomendations} := @thisQRLastExam -> {Recomendations};
                                        @Exam -> {MedicalExaminationType} := @thisQRLastExam -> str({MedicalExaminationType});
                                        @MEMedicalRecordID := @thisQRLastExam -> {MedicalRecordID};
                                        //Направления на диагностику
                                        begin(qrRouteToDiag)
                                            @qrRouteToDiag := (query {Research / Code}
                                            ,{Research / Name}
                                            ,{RouteDate}
                                            from "AKUZ.ROUTE_TO_DIAGNOSTICS"
                                            where {AmbulanceEvent / EventID} = @EventID 
                                            And ChildExists({Relationships}, {MedicalRecordLink / MedicalRecordID} = @MEMedicalRecordID)
                                            order by {RouteDate});
                                            foreach(thisqrRouteToDiag in @qrRouteToDiag)
                                                begin(Route_Diag)
                                                    @Route_Diag := new MP.ROUTE_TO_DIAGNOSTIC();
                                                    @Route_Diag -> {RouteDate} := @thisqrRouteToDiag -> str({RouteDate},"dd.MM.yyyy");
                                                    @Route_Diag -> {ResearchCode} := @thisqrRouteToDiag -> {Research / Code};                            
                                                    @Route_Diag -> {ResearchName} := @thisqrRouteToDiag -> {Research / Name};
                                                    @Exam -> {RoutesToDiagnostic} -> Add(@Route_Diag);
                                                end;
                                        end;
                                        //Направления на консультацию/специалисту
                                        begin(qrRouteToDoctor)
                                            @qrRouteToDoctor := (query {Speciality / Code}
                                            ,{Speciality / Name}
                                            ,{RouteDate}
                                            from "AKUZ.ROUTE_TO_DOCTOR_INSPECTION"
                                            where {AmbulanceEvent / EventID} = @EventID 
                                            And ChildExists({Relationships}, {MedicalRecordLink / MedicalRecordID} = @MEMedicalRecordID)
                                            order by {RouteDate});
                                            foreach(thisqrRouteToDoctor in @qrRouteToDoctor)
                                                begin(Route_Doctor)
                                                    @Route_Doctor := new MP.ROUTE_TO_DOCTOR();
                                                    @Route_Doctor -> {RouteDate} := @thisqrRouteToDoctor -> str({RouteDate},"dd.MM.yyyy");
                                                    @Route_Doctor -> {SpecialityCode} := @thisqrRouteToDoctor -> {Speciality / Code};                            
                                                    @Route_Doctor -> {SpecialityName} := @thisqrRouteToDoctor -> {Speciality / Name};
                                                    @Exam -> {RoutesToDoctor} -> Add(@Route_Doctor);
                                                end;
                                        end;
                                        //Лечебное назначение
                                        begin(qrHospDest)
                                            @qrHospDest := (query {Signa}
                                            from "AKUZ.HOSPITAL_DESTINATION"
                                            where {MedicalExamination / MedicalRecordID} = @MEMedicalRecordID
                                            order by {PostingDate});
                                            foreach(thisqrHospDest in @qrHospDest)
                                                begin(Hosp_Dest)
                                                    @Hosp_Dest := new MP.HOSPITAL_DESTINATION();
                                                    @Hosp_Dest -> {Signa} := @thisqrHospDest -> {Signa};                            
                                                    @Exam -> {HospDestinations} -> Add(@Hosp_Dest);
                                                end;
                                        end;                                        
                                        
                                        @Hosp -> {Exams} -> Add(@Exam);
                                    end;    
                            end;
                            
                            @HospList->{Hospitalizations} -> Add(@Hosp);                
                         end;
                end
            else
                begin()
                    @HospList -> {error} := "Пациент не госпитализирован!";
                    @status := 206;
                end;
        end
    else
        begin()
            @HospList -> {error} := "Идентификатор пациента указан неверно";
            @status := 206;        
        end;
    
    @HospList := Replace(Str(@HospList,"Json"),"\"flags_\":\"1\",","");
    print(@HospList);
    return(@HospList);     

    @response.StatusCode:=@status; 
end;