// Направления по текущей госпитализации. Медтод /getHospRoutes
begin(patID, HospRecordsList, qrEmergEvent, qrRouteToDiag, qrRouteToDoctor, status)

    //declare MP.HOSP_RECS_LIST(RoutesToDiagnostic:MP.ROUTE_TO_DIAGNOSTIC[Collection4],RoutesToDoctor:MP.ROUTE_TO_DOCTOR[Collection5],Recomendations:MP.RECOM[Collection6],error:string); 
    //declare MP.ROUTE_TO_DIAGNOSTIC(Collection4:MP.HOSP_RECS_LIST,RouteDate:string,ResearchCode:string,ResearchName:string);
    //declare MP.ROUTE_TO_DOCTOR(Collection5:MP.HOSP_RECS_LIST,RouteDate:string,SpecialityCode:string,SpecialityName:string);

    //{
    //    "EventID": "giud",
    //    "EventDate": "yyy-MM-dd",
    //    "RoutesToDiagnostic": [
    //        {
    //            "RouteDate": "10.07.2025",
    //            "ResearchCode": "A06.04.011",
    //            "ResearchName": "Рентгенография бедренного сустава"
    //        }
    //    ],
    //    "RoutesToDoctor": [
    //        {
    //            "RouteDate": "17.07.2025",
    //            "SpecialityCode": "013",
    //            "SpecialityName": "Кардиолог"
    //        }
    //    ]
    //}
    Try
    begin()
        
        @status := 200;
        @HospRecordsList := new MP.HOSP_RECORDS_LIST();
        @patID := TryCast(@querystring["patId"], "Guid");
        //@patID :="b708e782-4f83-4f3b-8639-512c0c9637bf"; //выписан
        //@patID :="3092e1c5-e08b-4654-a027-82be90fe8a49";
        if (str(@patID)<>"")
        begin()
            @qrEmergEvent := query top 1 {EventID},{EventDate}
                            from "AKUZ.EMERGENCY_EVENT" 
                            where {AmbulanceCard / Patient / PatientID} = @patID and {CloseDate} = Null()
                            order by {CreationDateTime} desc
                        ;

            if (@qrEmergEvent -> Count()>0)
            begin(EventID)
                @EventID := @qrEmergEvent[0] -> {EventID};
                @HospRecordsList -> {EventID} := @qrEmergEvent[0] -> {EventID};
                @HospRecordsList -> {EventDate} := Str(@qrEmergEvent[0] -> {EventDate},"yyyy-MM-dd");

                //Направления на диагностику
                begin()
                    @qrRouteToDiag := (query {Research / Code}
                                            ,{Research / Name}
                                            ,{RouteDate}
                                    from "AKUZ.ROUTE_TO_DIAGNOSTICS"
                                    where {AmbulanceEvent / EventID} = @EventID 
                                    order by {RouteDate});

                    if (@qrRouteToDiag -> Count()>0)
                    foreach(thisqrRouteToDiag in @qrRouteToDiag)
                    begin(Route_Diag)
                        @Route_Diag := new MP.ROUTE_TO_DIAGNOSTIC();
                        @Route_Diag -> {RouteDate} := @thisqrRouteToDiag -> str({RouteDate},"dd.MM.yyyy");
                        @Route_Diag -> {ResearchCode} := @thisqrRouteToDiag -> {Research / Code};                            
                        @Route_Diag -> {ResearchName} := @thisqrRouteToDiag -> {Research / Name};
                        @HospRecordsList -> {RoutesToDiagnostic} -> Add(@Route_Diag);
                    end;
                end;
                //Направления на консультацию/специалисту
                begin()
                    @qrRouteToDoctor := (query {Speciality / Code}
                                                ,{Speciality / Name}
                                                ,{RouteDate}
                                        from "AKUZ.ROUTE_TO_DOCTOR_INSPECTION"
                                        where {AmbulanceEvent / EventID} = @EventID 
                                        order by {RouteDate});
        
                    foreach(thisqrRouteToDoctor in @qrRouteToDoctor)
                    begin(Route_Doctor)
                        @Route_Doctor := new MP.ROUTE_TO_DOCTOR();
                        @Route_Doctor -> {RouteDate} := @thisqrRouteToDoctor -> str({RouteDate},"dd.MM.yyyy");
                        @Route_Doctor -> {SpecialityCode} := @thisqrRouteToDoctor -> {Speciality / Code};                            
                        @Route_Doctor -> {SpecialityName} := @thisqrRouteToDoctor -> {Speciality / Name};
                        @HospRecordsList -> {RoutesToDoctor} -> Add(@Route_Doctor);
                    end;
                end;
                if (@qrRouteToDiag -> Count()=0 and @qrRouteToDoctor -> Count()=0)
                begin()
                    @status:=206;
                    @HospRecordsList->{error} := "Не найдены направления по указанному patId";
                end;            
            end                   
            else
            begin()
                @HospRecordsList -> {error} := "Не найдены случаи госпитализации по указанному patId";
                @status := 206;
            end;
        end
        else
            begin()
                @HospRecordsList -> {error} := "Идентификатор пациента указан неверно";
                @status := 206;        
            end;
        
        @HospRecordsList := Replace(Str(@HospRecordsList,"Json"),"\"flags_\":\"1\",","");
        // print(@HospRecordsList);
        @response.StatusCode:=@status;
        return(@HospRecordsList);

        @response.StatusCode:=@status; 
    end
    catch(ex)
    begin()

        @HospRecordsList->{error} :=  @ex-> {InnerException};//  Str(@ELN,"Json");
        @response.StatusCode := 500;
        return(@HospRecordsList);

    end;
end;