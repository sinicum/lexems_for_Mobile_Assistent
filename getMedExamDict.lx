// метод getMedExamDict -- Справочник мероприятий (врачей/услуг) в рамках медосмотров с перечнем возрастов
begin(qrET,ExamTypes,EType,ETypeBundle)
    //    declare MP.ExamTypes(Types:MP.ET[Collection],Info:string);
    //    declare MP.ET(Collection:MP.ExamTypes,Name:string,Code:string,Bundles:MP.ETBundle[Collection2]);
    //    declare MP.ETBundle(Collection2:MP.ET,AgeGroupName:string,AgeGroupCriteria:string,MedicalServiceCode:string,MedicalServiceName:string,SpecialityName:string);


    //{
    //    "MedExamTypes": [
    //        {
    //            "Name": "ДВН 1 этап. приказ 404н",
    //            "Code": "004",
    //            "MedExamItems": [
    //                {
    //                    "AgeGroupName": "жен(18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63)",   // Наименование возрастной группы
    //                    "AgeGroupCriteria": "<lx:Criteria ...</lx:Criteria>",                     // Критерий возрасто-половой для 
    //                    "Required":"Обязательный/Дополнительный"                                  // Обязательность               // {Condition} Условие на выполнение
    //                    "Type":"Специальность/Услуга"                                             // Тип                          // {Type} Тип
    //                    "MedicalServiceCode": "B04.010.002",                                      // Код услуги                   // {MedicalService / Code};
    //                    "MedicalServiceName": "Осмотр фельдшером (акушеркой) или врачом акушером",// Наименрование услуги     // {MedicalService / Name};
    //                    "SpecialityName": "Акушер-гинеколог"                                      // Специальность                // {Speciality / Name}
    //                },
    //                {}
    //            ]
    //        }
    //        ,{},
    //        "Info":""
    //    ]
    //}
    
    @ExamTypes := new MP.EXAM_TYPES_LIST();
    @ExamTypes -> {Info} := Null();
    
    @qrET:= query {Name},{Code}
                ,{BundleMedicalExaminations / AgeGroup / Name}
                ,{BundleMedicalExaminations / AgeGroup / Criteria}
                ,{Condition}
                ,{Type}
                ,{BundleMedicalExaminations / MedicalService / Code}
                ,{BundleMedicalExaminations / MedicalService / Name}
                ,{BundleMedicalExaminations / Speciality / Name}
            from "EXAMINATION_TYPE" 
            where {Code} = "024" And {DateEnd} =Null();
  
    foreach(thisqrET in @qrET)
    begin()
        @EType := new MP.EXAM_TYPE();
        @EType -> {Name} := @thisqrET->{Name};
        @EType -> {Code} := @thisqrET->{Code};
        foreach(Bun in @thisqrET->{BundleMedicalExaminations})
        begin()
            @ETypeBundle := new MP.EXAM_TYPE_BUNDLE();
            @ETypeBundle -> {AgeGroupName} := @Bun->{AgeGroup / Name};
            @ETypeBundle -> {AgeGroupCriteria} := @Bun->{AgeGroup / Criteria};
            @ETypeBundle -> {Required} := @Bun->Str({Condition}); 
            @ETypeBundle -> {Type} := @Bun->Str({Type}); 
            @ETypeBundle -> {MedicalServiceCode} := @Bun->{MedicalService / Code};
            @ETypeBundle -> {MedicalServiceName} := @Bun->{MedicalService / Name};
            @ETypeBundle -> {SpecialityName} := @Bun->{Speciality / Name};
            // if (@Bun->{Speciality / Name} <> Null() or @Bun->{MedicalService / Name} <> Null())
            
            @EType -> {MedExamItems} -> Add(@ETypeBundle);
        end;
        @ExamTypes -> {MedExamTypes} -> Add(@EType);
    end;
    
    @ExamTypes := Replace(Str(@ExamTypes,"Json"),"\"flags_\":\"1\",","");
    // print(@ExamTypes);
    return(@ExamTypes); 
    
end;  