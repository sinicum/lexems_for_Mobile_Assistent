// метод getMedExamDict -- Справочник мероприятий (врачей/услуг) в рамках медосмотров с перечнем возрастов
begin(qrET,ExamTypes,EType,ETBundle)
    //    declare MP.ExamTypes(Types:MP.ET[Collection],Info:string);
    //    declare MP.ET(Collection:MP.ExamTypes,Name:string,Code:string,Bundles:MP.ETBundle[Collection2]);
    //    declare MP.ETBundle(Collection2:MP.ET,AgeGroupName:string,AgeGroupCriteria:string,MedicalServiceCode:string,MedicalServiceName:string,SpecialityName:string);


    //{
    //    "MedExamTypes": [
    //        {
    //            "Name": "ДВН 1 этап _old",
    //            "Code": "004",
    //            "MedExamItems": [
    //                {
    //                    "AgeGroupName": "Дети 1 мес",
    //                    "AgeGroupCriteria": "<lx:Criteria xmlns:lx=\"lexem\" type=\"And\"><lx:Criterion type=\"&lt;\"><lx:UserQueryOperand type=\"Const\" expectedValueSpecification=\"System.DateTime\" name=\"ActualDate\"/><lx:DateAdd datepart=\"Month\"><lx:ConstOperand type=\"Int32\">2</lx:ConstOperand><lx:Path OwnerQueryLevel=\"0\"><lx:StepInt index=\"5240005\"/><lx:StepInt index=\"5220002\"/><lx:StepInt index=\"5040015\"/></lx:Path></lx:DateAdd></lx:Criterion><lx:Criterion type=\"&gt;=\"><lx:UserQueryOperand type=\"Const\" expectedValueSpecification=\"System.DateTime\" name=\"ActualDate\"/><lx:DateAdd datepart=\"Month\"><lx:ConstOperand type=\"Int32\">1</lx:ConstOperand><lx:Path OwnerQueryLevel=\"0\"><lx:StepInt index=\"5240005\"/><lx:StepInt index=\"5220002\"/><lx:StepInt index=\"5040015\"/></lx:Path></lx:DateAdd></lx:Criterion></lx:Criteria>",
    //                    "MedicalServiceCode": "B04.010.002",
    //                    "MedicalServiceName": "Посещение к врачу-хирургу детскому",
    //                    "SpecialityName": "Детский хирург"
    //                },
    //                {}
    //            ]
    //        }
    //        ,{},
    //        "Info":""
    //    ]
    //}
    
    @ExamTypes := new MP.EXAM_TYPES_LIST();
    @ExamTypes -> {Info} := Null();
    
    @qrET:= query {Name},{Code}
                ,{BundleMedicalExaminations / AgeGroup / Name}
                ,{BundleMedicalExaminations / AgeGroup / Criteria} 
                ,{BundleMedicalExaminations / MedicalService / Code}
                ,{BundleMedicalExaminations / MedicalService / Name}
                ,{BundleMedicalExaminations / Speciality / Name}
            from "EXAMINATION_TYPE" ;
  
    foreach(thisqrET in @qrET)
        begin()
            @EType := new MP.EXAM_TYPE();
            @EType -> {Name} := @thisqrET->{Name};
            @EType -> {Code} := @thisqrET->{Code};
            foreach(Bun in @thisqrET->{BundleMedicalExaminations})
                begin(ETBun)
                    @ETypeBundle := new MP.EXAM_TYPE_BUNDLE();
                    @ETypeBundle -> {AgeGroupName} := @Bun->{AgeGroup / Name};
                    @ETypeBundle -> {AgeGroupCriteria} := @Bun->{AgeGroup / Criteria};
                    @ETypeBundle -> {MedicalServiceCode} := @Bun->{MedicalService / Code};
                    @ETypeBundle -> {MedicalServiceName} := @Bun->{MedicalService / Name};
                    @ETypeBundle -> {SpecialityName} := @Bun->{Speciality / Name};
                    if (@Bun->{Speciality / Name} <> Null() or @Bun->{MedicalService / Name} <> Null())
                        @EType -> {Bundles} -> Add(@ETypeBundle);
                end;
            @ExamTypes -> {Types} -> Add(@EType);
        end;
    
    @ExamTypes := Replace(Str(@ExamTypes,"Json"),"\"flags_\":\"1\",","");
    print(@ExamTypes);
    return(@ExamTypes); 
    
end;  