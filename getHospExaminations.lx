// Осмотры врачей по текущей госпитализации. Медтод /getHospExaminations
begin(patID, examID, HospExamsList, qrEmergEvent ,status, err)

    // {
    //     "EventID": "2f7d395d-f5fc-4a0e-af2d-855324f6e7f1",
    //     "EventDate": "2025-08-01",
    //     "LpuName": "ГАУЗ \"ГКБ №7\"",
    //     "Examinations": [
    //         {
    //             "ExaminationId": "",
    //             "DateTime": "01.08.2025 15:47:15",
    //             "Post": "",
    //             "Speciality": "",
    //             "ExaminationText": "<TABLE id=e0f61ef0-8f5e-42c6-95b6-4074715902e6 class=Complaint style=\"BORDER-TOP: #ffffff 1px..... </TABLE>",
    //             "Recommendation": "рекомендации 1 тест",
    //             "SEMDs": [
    //                 {
    //                     "SEMDContent": "Base64"
    //                 }
    //             ]
    //         }
    //     ]
    // }
    try
    begin()
        @status := 200;
        @HospExamsList := new MP.HOSP_EXAMS_LIST();
        @patID := TryCast(@querystring["patId"], "Guid");
        @examID := Str(@querystring["examId"]);

        if (str(@patID)<>"")
        begin()
            @qrEmergEvent := query top 1 {EventID},{EventDate},{AmbulanceCard / CardLpu / Name}
                                        ,{MedicalExaminations / MedicalRecordID}
                                        ,{MedicalExaminations / ExaminationDate}
                                        ,{MedicalExaminations / ExaminationTime}
                                        ,{MedicalExaminations / Post / Worker / LastName}
                                        ,{MedicalExaminations / Post / Worker / FirstName}
                                        ,{MedicalExaminations / Post / Worker / FatherName}
                                        ,{MedicalExaminations / Post / Speciality / Name}
                                        ,{MedicalExaminations / Examination}
                                        ,{MedicalExaminations / Recomendations}
                                        
                                        // ,{MedicalExaminations / CardNotes}
                                        //,{MedicalExaminations / CardNotes / CardNoteFile / Content} // ПЕРЕДЕЛАТЬ НА QUERY

                        from "AKUZ.EMERGENCY_EVENT" 
                        where {AmbulanceCard / Patient / PatientID} = @patID and {CloseDate} = Null()
                        order by {CreationDateTime} desc
                        ;
            if (@qrEmergEvent -> Count()>0)
            begin(EventID)
                @EventID := @qrEmergEvent[0] -> {EventID};
                @HospExamsList -> {EventID} := @qrEmergEvent[0] -> {EventID};
                @HospExamsList -> {EventDate} := Str(@qrEmergEvent[0] -> {EventDate},"yyyy-MM-dd");
                @HospExamsList -> {LpuName} := @qrEmergEvent[0] -> {AmbulanceCard / CardLpu / Name};

                foreach(thisqrEmergEvent in @qrEmergEvent)
                begin()

                    foreach(ME in @thisqrEmergEvent->{MedicalExaminations})
                    if( @examID="" or @ME->{MedicalRecordID} = @examID) // 

                    //if(@ME->ChildExists({CardNotes}, {ObjectProperties / ObjectType} = 228)) // Фольтровать, отдавать только те, что содержать СЭМД 191 - Осмотр
                    begin(Exam, qrCNF, MEID)
                        @Exam := new MP.EXAMINATION();

                        @Exam -> {ExaminationId} := @ME -> {MedicalRecordID};
                        @Exam -> {DateTime} := str(Cast(Str(@ME->{ExaminationDate},"yyyy-MM-dd")+ " "+ Str(@ME->{ExaminationTime},"HH:mm:ss"), "DateTime"));
                        @Exam -> {Post} := @ME->{Post / Worker / LastName} +" "+ 
                                            @ME->{Post / Worker / FirstName}+" "+ 
                                            IsNull(@ME->{Post / Worker / FatherName},"");
                        @Exam -> {Speciality} := @ME->{Post / Speciality / Name};
                        @Exam -> {ExaminationText} := UnPackString(@ME -> {Examination}); // HTMLToPlainText( 
                        if(@ME -> {Recomendations}<>Null()) @Exam -> {Recommendation} := str(@ME -> {Recomendations});

                        @MEID := @ME -> {MedicalRecordID};
                        @qrCNF := query top 1 {Content},{CardNote / ObjectProperties / ObjectTypeID}
                                 from "AKUZ.CARD_NOTE_FILE" 
                                 where {CardNote / AmbulanceCardRecord} = @MEID;
                        
                        foreach (CN in @qrCNF) //(CN in @ME->{CardNotes})
                        if(@CN->{CardNote / ObjectProperties / ObjectTypeID} IS "AKUZ.CN_CDA_EXAMINATION_ATTENDING_DOCTOR") // СЭМД 191 - Осмотр лечащим врачом...(CDA) Редакция 1
                        begin(SEMD)

                            @SEMD := new MP.SEMD();
                            @SEMD -> {SEMDContent} := Str(UnzipByteArray(@CN-> {Content}),"Base64"); // без Str() - тип System.Byte[] // UnzipByteArray

                            @Exam -> {SEMDs} -> Add(@SEMD);
                            //$throw (Str(@SEMD,"Json"));
                        end;
                        @HospExamsList -> {Examinations} -> Add(@Exam);
                    end;

                end;

            end
            else
            begin()
                @HospExamsList -> {error} := "Пациент не госпитализирован!";
                @status := 206;
            end;
        end
        else
        begin()
            @HospExamsList -> {error} := "Не указан параметр patId";
            @status := 206;        
        end;
        
        @HospExamsList := Replace(Str(@HospExamsList,"Json"),"\"flags_\":\"1\",","");
        // print(@HospExamsList);

        @response.StatusCode:=@status;
        return(@HospExamsList);



    end
    catch(ex)
    begin()

        @err := @ex->{InnerException};
        while (RegExMatch("--> ", @err, "All")->Count()-1 >0 )
            @err := SubString(@err,IndexOf(@err,"--> ")+4,StringLen(@err));

        @HospExamsList->{error} := SubString(@err,IndexOf(@err,":")+2,IndexOf(@err,Char(13))-IndexOf(@err,":")-2 );

        @response.StatusCode := 500;
        return(@HospExamsList);

    end;
end;