// Осмотры врачей по текущей госпитализации. Медтод /getHospExaminations
begin(patID, HospExamsList, qrEmergEvent ,status)

    // {
    //     "EventID": "2f7d395d-f5fc-4a0e-af2d-855324f6e7f1",
    //     "EventDate": "2025-08-01",
    //     "Examinations": [
    //         {
    //             "DateTime": "01.08.2025 15:47:15",
    //             "ExaminationText": "\r\r\r\rЖалобы\r\nЖалобЫ 1 тест\r\nАнамнез жизни\r\nАнамнез жизнИ 11 тест",
    //             "Recommendation": "рекомендации 1 тест",
    //             "SEMDs": [
    //                 {
    //                     "SEMDContent": "Base64"
    //                 }
    //             ]
    //         }
    //     ]
    // }
    try
    begin()
        @status := 200;
        @HospExamsList := new MP.HOSP_EXAMS_LIST();
        @patID := TryCast(@querystring["patId"], "Guid");

        if (str(@patID)<>"")
        begin()
            @qrEmergEvent := query top 1 {EventID},{EventDate}
                                        ,{MedicalExaminations / Recomendations}
                                        ,{MedicalExaminations / Examination}
                                        ,{MedicalExaminations / ExaminationDate}
                                        ,{MedicalExaminations / ExaminationTime}
                                        // ,{MedicalExaminations / CardNotes}
                                        ,{MedicalExaminations / CardNotes / CardNoteFile / Content} // ПЕРЕДЕЛАТЬ НА QUERY

                        from "AKUZ.EMERGENCY_EVENT" 
                        where {AmbulanceCard / Patient / PatientID} = @patID and {CloseDate} = Null()
                        order by {CreationDateTime} desc
                        ;
            if (@qrEmergEvent -> Count()>0)
            begin(EventID)
                @EventID := @qrEmergEvent[0] -> {EventID};
                @HospExamsList -> {EventID} := @qrEmergEvent[0] -> {EventID};
                @HospExamsList -> {EventDate} := Str(@qrEmergEvent[0] -> {EventDate},"yyyy-MM-dd");

                foreach(thisqrEmergEvent in @qrEmergEvent)
                begin()

                    foreach(ME in @thisqrEmergEvent->{MedicalExaminations})
                    //if(@ME->ChildExists({CardNotes}, {ObjectProperties / ObjectType} = 228)) // Фольтровать, отдавать только те, что содержать СЭМД 191 - Осмотр
                    begin(Exam)
                        @Exam := new MP.EXAMINATION();

                        @Exam -> {DateTime} := str(Cast(Str(@ME->{ExaminationDate},"yyyy-MM-dd")+ " "+ Str(@ME->{ExaminationTime},"HH:mm:ss"), "DateTime"));
                        @Exam -> {ExaminationText} := UnPackString(@ME -> {Examination}); // HTMLToPlainText( 
                        @Exam -> {Recommendation} := str(@ME -> {Recomendations});
                        
                        foreach(CN in @ME->{CardNotes})
                        if(@CN->{ObjectProperties / ObjectType} = 228) // СЭМД 191 - Осмотр лечащим врачом
                        begin(SEMD,cnfContent,zipfile,list_files,file,xml)
                            @SEMD := new MP.SEMD();
                            @SEMD -> {SEMDContent} := Str((@CN-> {CardNoteFile / Content}),"Base64"); // без Str() - тип System.Byte[]

                            // @cnfContent := @CN-> {CardNoteFile / Content};
                            // @zipfile := new FileZip(@cnfContent.GetStream());
                            // @list_files := @zipfile.Files;
                            // @file := @list_files[0];
                            // @xml := @file.GetString();
                            // @SEMD -> {SEMDContent} := @xml; 

                            @Exam -> {SEMDs} -> Add(@SEMD);
                            //$throw (Str(@SEMD,"Json"));
                        end;
                        @HospExamsList -> {Examinations} -> Add(@Exam);
                    end;

                end;

            end
            else
            begin()
                @HospExamsList -> {error} := "Пациент не госпитализирован!";
                @status := 206;
            end;
        end
        else
        begin()
            @HospExamsList -> {error} := "Идентификатор пациента указан неверно";
            @status := 206;        
        end;
        
        @HospExamsList := Replace(Str(@HospExamsList,"Json"),"\"flags_\":\"1\",","");
        // print(@HospExamsList);

        @response.StatusCode:=@status;        
        return(@HospExamsList);



    end
    catch(ex)
    begin()

        @HospExamsList->{error} :=  @ex-> {InnerException};//  Str(@ELN,"Json");
        @response.StatusCode := 500;
        return(@HospExamsList);

    end;
end;