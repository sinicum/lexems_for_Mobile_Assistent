// Осмотры врачей по текущей госпитализации. Медтод /getHospExaminations
begin(patID, HospExamsList, qrEmergEvent ,status)

    // {
    //     "EventID": "b708e782-4f83-4f3b-8639-512c0c9637bf",
    //     "EventDate": "2025-07-21"
    //     "Exams": [
    //         {
    //             "DateTime": "yyyy-MM-dd",
    //             "ExaminationText": "string"
    //         }
    //     ]
    // }
    try
    begin()
        @status := 200;
        @HospExamsList := new MP.HOSP_EXAMS_LIST();
        @patID := TryCast(@querystring["patId"], "Guid");

        if (str(@patID)<>"")
        begin()
            @qrEmergEvent := query top 1 {EventID},{EventDate}
                                        ,{MedicalExaminations / Recomendations}
                                        ,{MedicalExaminations / Examination}
                                        ,{MedicalExaminations / ExaminationDate}
                                        ,{MedicalExaminations / ExaminationTime}
                                        ,{CardNotes}
                                        ,{CardNotes / CardNoteFile / Content}

                        from "AKUZ.EMERGENCY_EVENT" 
                        where {AmbulanceCard / Patient / PatientID} = @patID and {CloseDate} = Null()
                        order by {CreationDateTime} desc
                        ;
            if (@qrEmergEvent -> Count()>0)
            begin(EventID)
                @EventID := @qrEmergEvent[0] -> {EventID};
                @HospExamsList -> {EventID} := @qrEmergEvent[0] -> {EventID};
                @HospExamsList -> {EventDate} := Str(@qrEmergEvent[0] -> {EventDate},"yyyy-MM-dd");

                foreach(thisqrEmergEvent in @qrEmergEvent)
                begin()

                    foreach(ME in @thisqrEmergEvent->{MedicalExaminations})
                    //if(ChildExists({CardNotes}, {ObjectProperties / ObjectType} = 228))
                    begin(Exam)
                        @Exam := new MP.EXAMINATION();

                        @Exam -> {DateTime} := str(Cast(Str(@ME->{ExaminationDate},"yyyy-MM-dd")+ " "+ Str(@ME->{ExaminationTime},"HH:mm:ss"), "DateTime"));
                        @Exam -> {ExaminationText} := HTMLToPlainText(UnPackString(@ME -> {Examination}));

                        @Exam -> {Recommendation} := @ME->{CardNotes}->Count();//str(@ME -> {Recomendations});
                        foreach(CN in @ME->{CardNotes})
                        //if({ObjectProperties / ObjectType} = 228)
                        begin()
                            @SEMD := new MP.SEMD();
                            @SEMD -> {SEMDContent} := "qwdqwd";//Str(@CN-> {CardNoteFile / Content},"Base64");
                            @Exam -> {SEMDs} -> Add(@SEMD);
                            $throw (Str(@SEMD,"Json"));
                        end;
                        @HospExamsList -> {Examinations} -> Add(@Exam);
                    end;

                end;

            end
            else
            begin()
                @HospExamsList -> {error} := "Пациент не госпитализирован!";
                @status := 206;
            end;
        end
        else
        begin()
            @HospExamsList -> {error} := "Идентификатор пациента указан неверно";
            @status := 206;        
        end;
        
        @HospExamsList := Replace(Str(@HospExamsList,"Json"),"\"flags_\":\"1\",","");
        // print(@HospExamsList);

        @response.StatusCode:=@status;        
        return(@HospExamsList);



    end
    catch(ex)
    begin()

        @HospExamsList->{error} :=  @ex-> {InnerException};//  Str(@ELN,"Json");
        @response.StatusCode := 500;
        return(@HospExamsList);

    end;
end;