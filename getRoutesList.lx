
begin(patID, RoutesList, routeRecords, Hosp, EmergEventID ,status)

    try 
    begin()
        
        @patID := @querystring["patId"]; // 4e6de5f7-4dc9-451b-bf0d-7a64a9b8c279
        @status := 200;
        

        //$throw(@patSNILS[0][0]);
        @RoutesList := new MP.ROUTES_LIST();


        if(@patID<>Null() and @patID<>"") 
        begin()

            @EmergEventID := select top 1 {EventID}
                        from "AKUZ.EMERGENCY_EVENT" 
                        where {AmbulanceCard / Patient / PatientID} = @patID;
            // @qrEmergEvent := query top 1 {EventID}
            //             from "AKUZ.EMERGENCY_EVENT" 
            //             where {AmbulanceCard / Patient / PatientID} = @patID;
            
            @routeRecords := query {MedicalRecord}
                                    ,{ObjectProperties / ObjectTypeID}
                                    ,{RouteDate} // Дата  создания
                                    ,{RecordTime}  //  и время создания

                                    ,{As AKUZ.ROUTE_TO_DOCTOR_INSPECTION / Speciality / Name}
                                    ,{As AKUZ.ROUTE_TO_DOCTOR_INSPECTION / Number}

                                    ,{As AKUZ.ROUTE_TO_DIAGNOSTICS / Research / Name}
                                    ,{As AKUZ.ROUTE_TO_DIAGNOSTICS / NumberDirection}
                                    // ,{RouteToDiagnosticsAddInfo / As AKUZ.X_RAY_ADD_INFO / XRayAddParamss/ DiagnosticsDictionary / Name}
                                    // ,{RouteToDiagnosticsAddInfo / As AKUZ.X_RAY_ADD_INFO / XRayAddParamss/ ExaminationArea}
                                    ,{As AKUZ.ROUTE_TO_DIAGNOSTICS / Research / EconomicCode}
                                    ,{As AKUZ.ROUTE_TO_DIAGNOSTICS / Research / Code}

                                    ,{EntryAmbulance / Place}
                                    ,{EntryAmbulance / Resource / DisplayName}
                                    
                                    ,{ResultExits} 
                                    
                        from "AKUZ.ROUTE_RECORD" 
                        where {AmbulanceEvent / EventID} = @EmergEventID[0][0]
                            and ({ObjectProperties / ObjectTypeID} IS "AKUZ.ROUTE_TO_DOCTOR_INSPECTION"
                                or {ObjectProperties / ObjectTypeID} IS "AKUZ.ROUTE_TO_DIAGNOSTICS"
                            );


            // ============== JSON структура  ==========
            // {
            //     "Routes": [ 
            //         {
            //             "Type": "string"                         // Тип AKUZ.ROUTE_TO_DOCTOR_INSPECTION - ко вроачу, AKUZ.ROUTE_TO_DIAGNOSTICS - исследование
            //             "CreationDateTime": "dd-MM-yyyy HH:mm",   // Дата и время создания

            //             "Name" : "string",                     // Наименование услуги / специальности
            //             "Place": "string",             // Место приёма
            //             "HospitalizationReason": "string",        // Причина госпитализации
            //             "ResultExits": "string",                     // Исполнение
            //             "LpuName": "string",                      // Наименование МО
            //         }
            //     ]
            // }

            @RoutesList -> {error} := @routeRecords ->Count();

            if (@routeRecords->Count()>0 )  //----- НАЙДЕНЫ ЛИ ПАЦИЕНТЫ ------//
            foreach(thisRoute in @routeRecords)
            //if(@thisRoute ->{ObjectProperties / ObjectTypeID} IN "AKUZ.ROUTE_TO_DOCTOR_INSPECTION")
            begin()

                @Route := new MP.ROUTE();
                @Route->{Type} := @thisRoute ->{ObjectProperties / ObjectTypeID};
                @Route->{CreationDateTime} := Str(@thisRoute->{RouteDate},"yyyy-MM-dd") + Str(@thisRoute->{RecordTime},"HH:mm");

                @Route->{Name} := IsNull(@thisRoute->{As AKUZ.ROUTE_TO_DIAGNOSTICS / Research / Name}
                    , @thisRoute-> {As AKUZ.ROUTE_TO_DOCTOR_INSPECTION / Speciality / Name} +" ["+ @thisRoute->{As AKUZ.ROUTE_TO_DOCTOR_INSPECTION / Number}+"]"    
                    , @thisRoute-> {As AKUZ.ROUTE_TO_DIAGNOSTICS / Research / Name} +" [" + IsNull(@thisRoute->{As AKUZ.ROUTE_TO_DIAGNOSTICS / Research / EconomicCode}, @thisRoute->{As AKUZ.ROUTE_TO_DIAGNOSTICS / Research / Code})+"]") 
                    ;

                @Route->{Place} := "Каб.№" +{EntryAmbulance / Place}+ " "+ {EntryAmbulance / Resource / DisplayName};
                @Route->{ResultExits} := @thisRoute->{ResultExits};
                


                @Route->{LpuName} := @thisRoute ->{AmbulanceCard / CardLpu / Name};


                @RoutesList->{Routes} -> Add(@Route);
                //@RoutesList->{error} := Str(@ELN,"Json");

            end
            else
            begin()
                @status:=206;
                @RoutesList->{error} := "Не найдены направления по указанному patId";
            end;

        end else 
        begin()
            @status:=206;
            @RoutesList->{error} := "Не указан параметр patId";
        end;

        @RoutesList->{error} := @routeRecords->Count();
        
        @response.StatusCode:=@status;
        return(@RoutesList);
    end
    catch(ex)
    begin()

        // @ex := IsNull(@ex->{InnerException}->{InnerException}->{InnerException}->{InnerException},
        //         IsNull(@ex->{InnerException}->{InnerException}->{InnerException},
        //         IsNull(@ex->{InnerException}->{InnerException},
        //         IsNull(@ex->{InnerException},@ex))));
    
        @status:=500;
        @response.StatusCode:=@status;
        @RoutesList->{error} :=  @ex-> {InnerException};//  Str(@ELN,"Json");
        return(@RoutesList);

    end;
end
